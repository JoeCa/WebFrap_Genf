<?php
/*******************************************************************************
*
* @author      : Dominik Bonsch <dominik.bonsch@webfrap.net>
* @date        :
* @copyright   : Webfrap Developer Network <contact@webfrap.net>
* @project     : Webfrap Web Frame Application
* @projectUrl  : http://webfrap.net
*
* @licence     : BSD License see: LICENCE/BSD Licence.txt
* 
* @version: @package_version@  Revision: @package_revision@
*
* Changes:
*
*******************************************************************************/


/**
 * @package WebFrap
 * @subpackage ModGenf
 */
class LibCartridgeIndepDokuErd
  extends LibCartridgeBdlEntity
{
////////////////////////////////////////////////////////////////////////////////
// Attributes
////////////////////////////////////////////////////////////////////////////////

  /**
   * all available modules
   *
   * @var array
   */
  protected $modules = array();

  /**
   * all available modules
   *
   * @var array
   */
  protected $dotFiles = array();

  /**
   * all available modules
   *
   * @var array
   */
  protected $templatePath = null;

  /**
   *
   * @var array
   */
  protected $vars = array();

  /**
   *
   * @var unknown_type
   */
  protected $readOnly = false;

  /**
   *
   * @var unknown_type
   */
  protected $sqlDump = '';

  /**
   *
   * @var unknown_type
   */
  protected $sqlSchema = '';

  /**
   *
   * @var unknown_type
   */
  protected $sqlOwner = '';


  protected $headerCss  = null;
  protected $headerImg  = null;
  protected $headerCode = null;

  protected $subProject = null;

////////////////////////////////////////////////////////////////////////////////
// parse, write + init
////////////////////////////////////////////////////////////////////////////////

  /**
   * parse all tables
   * @return void
   */
  public function parse()
  {

    $this->modules  = array();

    $nodes = $this->root->getNodes();

    foreach( $nodes as $entity )
    {


      if(!$this->node->setActiv( $entity ))
        continue;

      $this->readOnly = false;

      if( $this->subProject )
      {

        $subName =  $this->subProject;
        if( !$entity->inCategory( $this->subProject )  )
          continue;

        // need to put this in a tmp var here cause  $subName['readOnly'] will be interpreted wrong
        if( $entity->readOnlyInContext( $this->subProject ) )
          $this->readOnly = true;

      }

      $name = $this->node->getName();

      $this->genfCode['table_'.$name->name.'.html'] = $this->parseEntity();
      $this->modules[$name->lower('module')][]      = $name->name;

    }//end foreach

    ksort($this->modules);

    $this->parseModules();
    $this->parseModReferences();

    $this->parseMenu();
    $this->parseIndexHtml();

    $this->parseTop();
    $this->parseStart();

    //$this->parseSqlDump();


  }//end protected function parseAll */

  /**
   * the write method
   *
   */
  public function write()
  {

    if(!$this->pathOutput)
    {
      $folder = PATH_GW.'cache/genf/'.$this->builder->projectKey.'/';
    }
    else
    {
      $folder = $this->pathOutput;
    }

    $path = $folder.'hand/all/doc/erd/';

    foreach( $this->genfCode as $fileName => $code )
    {
      $this->writeFile( $code, $path, $fileName );
    }//end foreach


    SFilesystem::mkdir( $path.'/image/' );

    foreach( $this->dotFiles as $fileName => $code )
    {
      $this->writeFile( $code, $path.'dot/', $fileName.'.dot' );
      `neato -Tpng -Gepsilon=1.5 -o {$path}/image/{$fileName}.png {$path}/dot/{$fileName}.dot`;
    }

    SFilesystem::mkdir( $path.'/header/' );

    // copy doc an jquery
    $css    = new LibFilesystemFile( $this->headerCss );
    $css->copy($path.'/header/style.css');

    $img    = new LibFilesystemFile( $this->headerImg  );
    $img->copy($path.'header/header.png');

    $jquery = new LibFilesystemFile( $this->headerCode );
    $jquery->copy($path.'header/script.js');


  }//end public function write

  /**
   *
   * @return unknown_type
   */
  public function init()
  {

    $project = $this->project;


    if( isset( $this->cartridge->subProject ) )
      $this->subProject = trim( $this->cartridge->subProject ) ;
    else
      $this->subProject = null;

    if(  isset( $this->cartridge->title ) )
      $this->vars['title'] = $this->builder->replaceVars( $this->cartridge->title );
    else
      $this->vars['title'] = 'WebFrap Erd Documetor';

    if(  isset( $this->cartridge->footer ) )
      $this->vars['footer'] = $this->builder->replaceVars( $this->cartridge->footer );
    else
      $this->vars['footer'] = '<div class="footer" ><a href="http://webfrap.net" target="__new" >Generated by <b>Web</b><span>Frap</span>Â© ER documentor</a></div>'.NL;

    if(  isset( $this->cartridge->modelName ) )
      $this->vars['modelName'] = $this->builder->replaceVars( $this->cartridge->modelName );
    else
      $this->vars['modelName'] = $project->name.NL;

    if(  isset( $this->cartridge->mainTop ) )
      $this->vars['mainTop'] = $this->builder->replaceVars( $this->cartridge->mainTop );
    else
      $this->vars['mainTop'] = '<a href="http://webfrap.net" target="__top" >Web<span>Frap</span></a>  <a href="start.html" class="erDoc" target="main">ER Documentor</a> ';


    if( isset( $this->cartridge->headerCss  ) )
    {
      $this->headerCss = $this->builder->replaceVars( $this->cartridge->headerCss );
    }
    else
    {
      $this->headerCss = PATH_GW.'data/templates/erdoc/style.css';
    }

    if( isset( $this->cartridge->headerImg  ) )
    {
      $this->headerImg = $this->builder->replaceVars( $this->cartridge->headerImg );
    }
    else
    {
      $this->headerImg = PATH_GW.'data/templates/erdoc/header.png';
    }

    if( isset( $this->cartridge->headerCode  ) )
    {
      $this->headerCode = $this->builder->replaceVars( $this->cartridge->headerCode );
    }
    else
    {
      $this->headerCode = PATH_GW.'data/templates/erdoc/script.js';
    }


  }//end public function init

////////////////////////////////////////////////////////////////////////////////
// Init
////////////////////////////////////////////////////////////////////////////////

  /**
   * Enter description here...
   *
   * @param unknown_type $cartridge
   */
  public function loadSqlParsers( $cartridge  )
  {


    // parser Postgresql
    /*
    $parser = new LibCartridgeWbfPostgresql( );
    $parser->setOwner( $owner );
    $parser->setSchema( $schema );

    $parser->sqlOwner = $owner;
    $parser->sqlSchema = $schema;

    $parser->setCreateKeyTree();
    $parser->tmpParse();

    $this->addSqlParser( 'Postgresql' ,  $parser );
    */

  }//end public function loadSqlParsers */

////////////////////////////////////////////////////////////////////////////////
// Getter and Setter
////////////////////////////////////////////////////////////////////////////////

  /**
   * Enter description here...
   *
   * @param LibParserDdlAbstract $parser
   */
  public function addSqlParser( $type ,  $parser )
  {

    $this->sqlParser[$type] = $parser;

  }//end public function addSqlParser */

////////////////////////////////////////////////////////////////////////////////
// Parser Methodes
////////////////////////////////////////////////////////////////////////////////

  /**
   * the sql parser
   * @param string $table
   * @return string
   */
  protected function parseSql( $table )
  {

    $name = $this->node->getName();

    $code = '<h2>Sql</h2>';

    foreach( $this->sqlParser as $dbName => $parser )
    {
      $code .= '<h3>DBMS '.$dbName.'</h3>'.NL;
      $code .= '<pre class="boxExampleCode">';
      $code .= $parser->getTable($name->lower('module'),$table);

      $this->sqlDump .= $parser->getTable($name->lower('module'),$table).NL;

      if( $keys = $parser->getFk($table) )
      {
        foreach($keys as $key)
        {
          $code .= $key['ddl'];
        }
      }

      $code .= '</pre>'.NL;

    }//end foreach( $this->sqlParser as $dbName => $parser )

    return $code;

  }//end public function parseSql */

  /**
   * parse the reference
   * @param string $table
   * @return string
   */
  protected function parseReferences( $name = null )
  {

    if( !$name )
      $name   = $this->node->getName();

    $entity = $this->node->getEntity( $name );

    $code = '<h2>References from table '.$name->name.'</h2>';

    $code .= '<table class="dataTable" >'.NL;
    $code .= '<thead class="head">'.NL;
    $code .= '  <tr>'.NL;
    $code .= '    <th>Name</th>'.NL;
    $code .= '    <th>Src Attr</th>'.NL;
    $code .= '    <th>Target Table</th>'.NL;
    $code .= '    <th>Target Attr</th>'.NL;
    $code .= '    <th>On Update</th>'.NL;
    $code .= '    <th>On Delete</th>'.NL;
    $code .= '  </tr>'.NL;
    $code .= '</thead>'.NL;
    $code .= '<tbody>'.NL;


    foreach( $entity as $attribute )
    {
      if( !$key = $attribute->fk() )
        continue;

      $onUpdate = $key->onUpdate();
      $onDelete = $key->onDelete();


      $code .= '  <tr>'.NL;
      $code .= '    <td>'.$key->name->fullName.'</td>'.NL;
      $code .= '    <td>'.$attribute->name->name.'</td>'.NL;
      $code .= '    <td><a target="main" href="table_'.$attribute->target().'.html">'.$attribute->target().'</a></td>'.NL;
      $code .= '    <td>rowid</td>'.NL;
      $code .= '    <td>'.$onUpdate.'</td>'.NL;
      $code .= '    <td>'.$onDelete.'</td>'.NL;
      $code .= '  </tr>'.NL;
    }

    $code .= '</tbody>'.NL;
    $code .= '</table>'.NL;

    $code .= '<div class="doc_small" >'.NL;
    $code .= '<iframe class="doc_small"  src="image/'.$name->name.'_src.png" ></iframe>'.NL;
    $code .= '</div>'.NL;

    $code .= '<h2>Back references to Table '.$name->name.'</h2>';

    $code .= '<table class="dataTable" >'.NL;
    $code .= '<thead class="head">'.NL;
    $code .= '  <tr>'.NL;
    $code .= '    <th>Name</th>'.NL;
    $code .= '    <th>Src Table</th>'.NL;
    $code .= '    <th>Src Attr</th>'.NL;
    $code .= '    <th>Target Attr</th>'.NL;
    $code .= '    <th>On Update</th>'.NL;
    $code .= '    <th>On Delete</th>'.NL;
    $code .= '  </tr>'.NL;
    $code .= '</thead>'.NL;
    $code .= '<tbody>'.NL;

    foreach( $this->node as $refEntity )
    {
      foreach( $refEntity as $attribute )
      {

        if( !$key = $attribute->fk( $name->name ) )
          continue;

        $onUpdate = $key->onUpdate();
        $onDelete = $key->onDelete();

        $code .= '  <tr>'.NL;
        $code .= '    <td>'.$key->name->fullName.'</td>'.NL;
        $code .= '    <td><a target="main" href="table_'.$refEntity->name->name.'.html">'.$refEntity->name->name.'</a></td>'.NL;
        $code .= '    <td>rowid</td>'.NL;
        $code .= '    <td>'.$attribute->name->name.'</td>'.NL;
        $code .= '    <td>'.$onUpdate.'</td>'.NL;
        $code .= '    <td>'.$onDelete.'</td>'.NL;
        $code .= '  </tr>'.NL;

      }
    }

    $code .= '</tbody>'.NL;
    $code .= '</table>'.NL;

    $code .= '<div class="doc_small" >'.NL;
    $code .= '<iframe class="doc_small" src="image/'.$name->name.'_target.png" ></iframe>'.NL;
    $code .= '</div>'.NL;

    return $code;

  }//end public function parseReferences */

  /**
   * parse the entity
   * @return string
   */
  protected function parseEntity( )
  {

    $name     = $this->node->getName();
    $entity   = $this->node->getEntity();

    $comment  = $entity->description();
    $readOnly = $this->readOnly ? '<span class="readonly">( is readonly )</span>':'';
    $classRo  = $this->readOnly ? ' readonly':'';

    $code     = $this->parseDokuHead( 'Docu for table: '.$name->name );

    $code .= <<<CODE
    <body >
    <div class="content" >
<h2>Tabelle: {$name->name} {$readOnly}</h2>

<p>
{$comment}
</p>

<table class="dataTable{$classRo}">

  <thead class="head">
    <tr>
      <th title="Col Name">Name</th>
      <th title="Col Title">Type</th>
      <th title="Validator Name used in System">Validator</th>
      <th title="Size of Col">Size</th>
      <th title="Min size for validation">MinSize</th>
      <th title="Max size for validation">MaxSize</th>
      <th title="the default value for the table">Default</th>
      <th title="May the value be null">NN</th>
      <th title="name of the sequence">S</th>
      <th title="is this field unique">U</th>
      <th title="is this field a primary key">Pk</th>
      <th title="comment for this field" >Comment</th>
    </tr>
  </thead>

  <tbody>

CODE;

    $code .= $this->asmAttributes( $entity );

    $code .= <<<CODE
  </tbody>
</table>

CODE;

    $code .= $this->parseReferences( $name );
    //$code .= $this->parseSql( $name );

    $code .= '</div>'.NL;

    $code .= $this->parseFooter();
    $code .= $this->parseFoot();

    return $code;


  }//end protected function parseEntity */

  /**
   * parse the attributes for the table
   *
   * @return string
   */
  protected function asmAttributes( $entity )
  {


    $code = '';


    foreach( $entity as  $attribute )
    {

      if( substr( $attribute['name'] , 0 , 2 ) == 'm_' )
      {
        $class = ' class="meta" ';
        $title = ' title="this is a meta attribute" ';
      }
      else
      {
        $class = '';
        $title = ' title="this is a standard attribute" ';
      }

      $checkedNull   = $attribute->required() ? ' checked="checked" ':'';
      $checkedUnique = $attribute->unique()   ? ' checked="checked" ':'';
      $checkedPk     = $attribute->fk()       ? ' checked="checked" ':'';
      $sequence      = $attribute->sequence() ? ' checked="checked" ':'';

      $code .= '  <tr '.$class.' '.$title.' >'.NL;
      if( $target = $attribute->target() )
      {
        $code .= '    <td><a target="main" href="table_'.$target.'.html">'.$attribute->name->name.'</a></td>'.NL;
      }
      else
      {
        $code .= '    <td>'.$attribute->name->name.'</td>'.NL;
      }
      $code .= '    <td>'.$attribute->dbType().'</td>'.NL;
      $code .= '    <td>'.$attribute->validator().'</td>'.NL;
      $code .= '    <td>'.$attribute->size().'</td>'.NL;
      $code .= '    <td>'.$attribute->minSize().'</td>'.NL;
      $code .= '    <td>'.$attribute->maxSize().'</td>'.NL;
      $code .= '    <td>'.$attribute->defaultValue().'</td>'.NL;
      $code .= '    <td><input type="checkbox" disabled="disabled" '.$checkedNull.' /></td>'.NL;
      $code .= '    <td><input type="checkbox" disabled="disabled" '.$sequence.' /></td>'.NL;
      $code .= '    <td><input type="checkbox" disabled="disabled" '.$checkedUnique.' /></td>'.NL;
      $code .= '    <td><input type="checkbox" disabled="disabled" '.$checkedPk.' /></td>'.NL;
      $code .= '    <td>'.$attribute->description().'</td>'.NL;
      $code .= '  </tr>'.NL;

    }

    return $code;

  }//end public function asmAttributes()

  /**
   * @param string
   * @return string
   */
  public function parseDokuHead( $title = null )
  {

    $project  = $this->project;

    $head = <<<CODE
<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>{$project->name}</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="content-Script-Type" content="text/javascript" />
<meta http-equiv="content-Style-Type" content="text/css" />
<meta http-equiv="content-language" content="de" />

<link href="header/style.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="header/script.js"></script>
</head>

CODE;

  return $head;


  }//end public function parseDokuHead */

  /**
   * @return string
   */
  public function parseFoot()
  {

    $code = '</body>'.NL.'</html>'.NL;

    return $code;

  }//end public function parseFoot */

  /**
   * @return string
   */
  protected function parseFooter()
  {

    return $this->vars['footer'];

  }//end public function parseFooter */

  /**
   * parse the index file
   *
   */
  protected function parseIndexHtml()
  {

    $project  = $this->project;

    $code = <<<CODE
<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>ERD Documentation for: {$project->name}</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="content-Script-Type" content="text/javascript" />
<meta http-equiv="content-Style-Type" content="text/css" />
<meta http-equiv="content-language" content="de" />
</head>

<frameset cols="200px,*">
  <frame src="menu.html" name="menu">
  <frameset rows="100px,*">
  <frame src="top.html" name="top">
  <frame src="start.html" name="main">
  </frameset>
</frameset>

</html>
CODE;

    $this->genfCode['index.html'] = $code;

  }//end public function parseIndexHtml */

  /**
   * parse the menu
   *
   */
  protected function parseMenu()
  {

    $code = $this->parseDokuHead( 'Menu' );

    $code .= <<<CODE

    <body class="menu" >

    <div class="content" >

    <h2><a href="start.html" target="main" >Overview</a></h2>
    <p><a target="new_window" href="./dbDump.sql" >Download the SQL Dump</a></p>

  <ul class="treeMenu" >

CODE;

    //ksort($this->modules);

    foreach( $this->modules as $domainName => $entities )
    {

      $code .= <<<CODE
    <li style="padding-top:10px;" >
    <h4><a href="modul_{$domainName}.html" target="main" >{$domainName}</a></h4>

    <ul>

CODE;

    $code .= NL;

      asort( $entities );

      foreach( $entities as $entityKey )
        $code .= '<li><a href="table_'.$entityKey.'.html" target="main" >'.$entityKey.'</a></li>'.NL;

      $code .= '</ul></li>'.NL;

    }//end foreach( $this->modules as $domainName => $tmp )

    $code .= '</ul>'.NL.'</div>'.NL;

    $code .= $this->parseFooter();
    $code .= $this->parseFoot();

    $this->genfCode['menu.html'] = $code;

  }//end public function parseMenu */

  /**
   * Enter description here...
   *
   */
  protected function parseTop()
  {

    $code = $this->parseDokuHead( "Menu" );

    $code .= <<<CODE

    <body class="top" >
    <div class="content" >

    <div class="headBox" >
      <h1>{$this->vars['mainTop']}</h1>
      <h3><a  href="start.html" target="main">Modules from Model {$this->vars['modelName']} </a></h3>
    </div>

CODE;

    $code .= '<ul class="topMenu" >'.NL;

    $mods = array_keys($this->modules);

    asort( $mods );

    foreach( $mods as $domainName  )
      $code .= '<li><a href="./modul_'.$domainName.'.html" target="main">'.$domainName.'</a> |</li>'.NL;

    $code .= '</ul>'.NL;
    $code .= '</div>'.NL;

    $code .= $this->parseFoot();

    $this->genfCode['top.html'] = $code;

  }//end public function parseTop */

  /**
   * Enter description here...
   *
   */
  protected function parseStart()
  {

    $code = $this->parseDokuHead( 'Start' );

    $code .= <<<CODE

    <body>
    <div class="content"  >

  <h3>Modul / Table Overview</h3>

  <table class="dataTable" >
  <thead class="head">
    <tr>
      <th>Modul</th>
      <th>Table</th>
      <th>Number Tables</th>
    </tr>
  </thead>
  <tbody>

CODE;

    foreach( $this->modules as $domainName => $entities )
    {

      $anzTables = count( $this->modules[$domainName] );

      $code .= <<<CODE
    <tr class="head" >
    <td><a href="modul_{$domainName}.html" target="main" >{$domainName}</a></td>
    <td></td>
    <td>{$anzTables}</td>
    </tr>

CODE;


      foreach( $entities as $entity )
      {
        $code .= <<<CODE
    <tr>
    <td></td>
    <td><a href="table_{$entity}.html" target="main" >{$entity}</a></td>
    <td></td>
    </tr>

CODE;

      }//end foreach( $this->modulesMap[$domainName] as $table )

    }//end foreach( $this->modules as $domainName => $tmp )

    $code .='</tbody>'.NL;
    $code .='</table>'.NL;
    $code .='</div>'.NL;

    $code .= $this->parseFooter();
    $code .= $this->parseFoot();

    $this->genfCode['start.html'] = $code;

  }//end public function parseStart */

  /**
   * parse the modules
   *
   */
  protected function parseModules()
  {

    ksort($this->modules);

    foreach( $this->modules as $domainName => $entities )
    {
      $code = $this->parseDokuHead( "Start" );

      $code .= <<<CODE

    <body>
    <div class="content" >
    <h2>Modul: {$domainName}</h2>

    <ol class="docMenu" >

CODE;

      asort( $entities );

      foreach( $entities as $entity )
        $code .= '<li><a href="table_'.$entity.'.html" target="main" >'.$entity.'</a></li>'.NL;

      $code .= '</ol>'.NL;
      $code .= '</div>'.NL;

      $code .= '<h2>Modul References</h2>'.NL;
      $code .= '<div class="doc_big" >'.NL;
      $code .= '<iframe class="doc_big" src="image/'.$domainName.'_intern.png" ></iframe>'.NL;
      $code .= '</div>'.NL;

      $code .= '<h2>Connections to other Modules</h2>'.NL;
      $code .= '<div class="doc_big" >'.NL;
      $code .= '<iframe class="doc_big" src="image/'.$domainName.'_extern.png" ></iframe>'.NL;
      $code .= '</div>'.NL;

      $code .= $this->parseFooter();
      $code .= $this->parseFoot();

      $this->genfCode['modul_'.$domainName.'.html'] = $code;

    }//end foreach


  }//end public function parseModules */

  /**
   * parse the modules
   *
   */
  protected function parseModReferences()
  {

    foreach( $this->modules as $domainName => $entities )
    {

      $codeI = 'graph G {'.NL;
      $codeE = 'graph G {'.NL;

      foreach( $entities as $entName )
      {
        $entity = $this->node->getEntity( $entName );
        $codeT = 'graph G {'.NL;

        foreach( $entity as $attribute )
        {

          if( !$key = $attribute->fk() )
            continue;

          $target = trim($attribute->target());

          $tmp = explode( '_' , $target );
          $domainName2 = array_shift( $tmp );

          if( $domainName == $domainName2 )
            $codeI .=  $entName.' -- '.$target.' [len=5];'.NL;
          else
            $codeE .=  $entName.' -- '.$target.' [len=5];'.NL;

          $codeT .=  $entName.' -- '.$target.' [len=3];'.NL;

        }
        $codeT .= '}'.NL;
        $this->dotFiles[$entName.'_src'] = $codeT;


        $codeT = 'graph G {'.NL;
        foreach( $this->node as $refEntity )
        {
          foreach( $refEntity as $attribute )
          {
            if( !$fk = $attribute->fk() )
              continue;

            $target = $attribute->target();

            if( $target == $entName  )
              $codeT .=  $refEntity->name->name.' -- '.$entName.' [len=3];'.NL;
          }
        }

        $codeT .= '}'.NL;
        $this->dotFiles[$entName.'_target'] = $codeT;

      }

      $codeI .= '}'.NL;
      $codeE .= '}'.NL;

      $this->dotFiles[$domainName.'_intern'] = $codeI;
      $this->dotFiles[$domainName.'_extern'] = $codeE;

    }//end foreach


  }//end public function parseModules */


  /**
   *
   * @return unknown_type
   */
  protected function parseSqlDump()
  {

    $sql = <<<SQL
  CREATE SCHEMA {$this->sqlSchema} AUTHORIZATION {$this->sqlOwner};
  SET SEARCH_PATH TO {$this->sqlSchema};

SQL;

    $this->genfCode['dbDump.sql'] = $sql.NL.$this->sqlDump.NL;


  }//end protected function parseSqlDump  */



} // end class LibCartridgeWbfDokuErd

